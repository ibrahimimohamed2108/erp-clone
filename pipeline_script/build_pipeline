// Initialize stageResults in global binding scope
stageResults = [:]

def recordStageResult(stageName, status, stageResultsMap) {
    stageResultsMap[stageName] = status
    echo "Stage '${stageName}' completed with status: ${status}"
}

def executeStageWithTracking(stageName, closure, stageResultsMap) {
    try {
        closure()
        recordStageResult(stageName, 'SUCCESS', stageResultsMap)
    } catch (Exception e) {
        recordStageResult(stageName, 'FAILED', stageResultsMap)
        throw e
    }
}

def generateEmailBody(buildStatus, stageResultsMap) {
    def emailBody = """
<html>
<head>
    <style>
        body { font-family: Arial, sans-serif; margin: 20px; }
        .header { background-color: ${buildStatus == 'SUCCESS' ? '#d4edda' : '#f8d7da'}; 
                 color: ${buildStatus == 'SUCCESS' ? '#155724' : '#721c24'}; 
                 padding: 15px; border-radius: 5px; margin-bottom: 20px; }
        .summary-table { width: 100%; border-collapse: collapse; margin: 20px 0; }
        .summary-table th, .summary-table td { border: 1px solid #ddd; padding: 12px; text-align: left; }
        .summary-table th { background-color: #f2f2f2; font-weight: bold; }
        .success { color: #28a745; font-weight: bold; }
        .failed { color: #dc3545; font-weight: bold; }
        .skipped { color: #6c757d; font-weight: bold; }
        .build-info { background-color: #e9ecef; padding: 15px; border-radius: 5px; margin: 20px 0; }
    </style>
</head>
<body>
    <div class="header">
        <h2>üöÄ Jenkins Pipeline Execution Report</h2>
        <p><strong>Build Status:</strong> ${buildStatus}</p>
    </div>
    
    <div class="build-info">
        <h3>üìã Build Information</h3>
        <ul>
            <li><strong>Job Name:</strong> ${env.JOB_NAME}</li>
            <li><strong>Build Number:</strong> #${env.BUILD_NUMBER}</li>
            <li><strong>Build URL:</strong> <a href="${env.BUILD_URL}">${env.BUILD_URL}</a></li>
            <li><strong>Repository:</strong> emierp</li>
            <li><strong>Branch:</strong> main</li>
            <li><strong>Duration:</strong> ${currentBuild.durationString}</li>
            <li><strong>Started by:</strong> ${env.BUILD_USER_ID ?: 'System'}</li>
        </ul>
    </div>
    
    <h3>üìä Stage Execution Summary</h3>
    <table class="summary-table">
        <thead>
            <tr>
                <th>Stage Name</th>
                <th>Status</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>
"""
    
    def stageDescriptions = [
        'Git Checkout': 'Source code checkout from GitHub repository',
        'Install npm': 'Node.js dependencies installation',
        'Trivy Scan': 'Security vulnerability scanning',
        'Build Docker Image': 'Docker image build process',
        'Create ECR repo': 'AWS ECR repository creation/verification',
        'Login to ECR & tag image': 'ECR authentication and image tagging',
        'Push image to ECR': 'Docker image push to ECR registry',
        'Cleanup Images': 'Local Docker images cleanup'
    ]
    
    stageResultsMap.each { stageName, status ->
        def statusClass = status.toLowerCase()
        def statusIcon = status == 'SUCCESS' ? '‚úÖ' : (status == 'FAILED' ? '‚ùå' : '‚è≠Ô∏è')
        emailBody += """
            <tr>
                <td><strong>${stageName}</strong></td>
                <td class="${statusClass}">${statusIcon} ${status}</td>
                <td>${stageDescriptions[stageName] ?: 'Pipeline stage execution'}</td>
            </tr>
        """
    }
    
    emailBody += """
        </tbody>
    </table>
    
    <div style="margin-top: 30px; padding: 15px; background-color: #f8f9fa; border-radius: 5px;">
        <h4>üîß Next Steps:</h4>
        <ul>
"""
    
    if (buildStatus == 'SUCCESS') {
        emailBody += """
            <li>‚úÖ Your application has been successfully deployed to ECR</li>
            <li>üöÄ You can now proceed with your deployment to staging/production</li>
            <li>üìä Review the build logs for any warnings or optimization opportunities</li>
        """
    } else {
        emailBody += """
            <li>üîç Check the failed stage(s) in the Jenkins console output</li>
            <li>üõ†Ô∏è Fix the issues and trigger a new build</li>
            <li>üìû Contact the DevOps team if you need assistance</li>
        """
    }
    
    emailBody += """
        </ul>
    </div>
    
    <div style="margin-top: 20px; font-size: 12px; color: #6c757d;">
        <p>This is an automated message from Jenkins CI/CD Pipeline. Please do not reply to this email.</p>
        <p>Generated on: ${new Date().format('yyyy-MM-dd HH:mm:ss')} UTC</p>
    </div>
</body>
</html>
"""
    return emailBody
}

pipeline {
    agent any
    
    parameters {
        string(name: 'ECR_REPO_NAME', defaultValue: 'emierp', description: 'Enter repository name')
        string(name: 'AWS_ACCOUNT_ID', defaultValue: '409556542010', description: 'Enter AWS Account ID')
    }
    
    tools {
        jdk 'JDK'
        nodejs 'NodeJS'
    }
    
    environment {
        // SCANNER_HOME = tool 'SonarQube Scanner'
        EMAIL_RECIPIENTS = 'ibrahimi.mohamed@student.emi.ac.ma,simparamohamedelbechir7@gmail.com'
    }
    
    stages {
        stage('1. Git Checkout') {
            steps {
                script {
                    executeStageWithTracking('Git Checkout', {
                        git branch: 'main', url: 'https://github.com/ibrahimimohamed2108/erp-clone.git'
                    }, stageResults)
                }
            }
        }
        
        /*stage('2. SonarQube Analysis') {
            steps {
                script {
                    executeStageWithTracking('SonarQube Analysis', {
                        withSonarQubeEnv ('sonar-server') {
                            sh """
                            $SCANNER_HOME/bin/sonar-scanner \
                            -Dsonar.projectName=emierp \
                            -Dsonar.projectKey=emierp
                            """
                        }
                    }, stageResults)
                }
            }
        }
        
        stage('3. Quality Gate') {
            steps {
                script {
                    executeStageWithTracking('Quality Gate', {
                        waitForQualityGate abortPipeline: false, 
                        credentialsId: 'sonar-token'
                    }, stageResults)
                }
            }
        }*/
        
        stage('4. Install npm') {
            steps {
                script {
                    executeStageWithTracking('Install npm', {
                        sh "npm install"
                    }, stageResults)
                }
            }
        }
        
        stage('5. Trivy Scan') {
            steps {
                script {
                    executeStageWithTracking('Trivy Scan', {
                        sh "trivy fs . > trivy.txt"
                        
                        // Archive the scan results
                        archiveArtifacts artifacts: 'trivy.txt', 
                                       allowEmptyArchive: true,
                                       fingerprint: true
                    }, stageResults)
                }
            }
        }
        
        stage('6. Build Docker Image') {
            steps {
                script {
                    executeStageWithTracking('Build Docker Image', {
                        sh "docker build -t ${params.ECR_REPO_NAME} ."
                        
                        // Verify image was built successfully
                        sh "docker images ${params.ECR_REPO_NAME}"
                    }, stageResults)
                }
            }
        }
        
        stage('7. Create ECR repo') {
            steps {
                script {
                    executeStageWithTracking('Create ECR repo', {
                        withCredentials([
                            string(credentialsId: 'access-key', variable: 'AWS_ACCESS_KEY'), 
                            string(credentialsId: 'secret-key', variable: 'AWS_SECRET_KEY')
                        ]) {
                            sh """
                            aws configure set aws_access_key_id $AWS_ACCESS_KEY
                            aws configure set aws_secret_access_key $AWS_SECRET_KEY
                            aws configure set region us-east-1
                            aws configure set output json
                            
                            # Check if repository exists, create if it doesn't
                            if ! aws ecr describe-repositories --repository-names ${params.ECR_REPO_NAME} --region us-east-1 >/dev/null 2>&1; then
                                echo "Creating ECR repository: ${params.ECR_REPO_NAME}"
                                aws ecr create-repository --repository-name ${params.ECR_REPO_NAME} --region us-east-1
                            else
                                echo "ECR repository ${params.ECR_REPO_NAME} already exists"
                            fi
                            """
                        }
                    }, stageResults)
                }
            }
        }
        
        stage('8. Login to ECR & tag image') {
            steps {
                script {
                    executeStageWithTracking('Login to ECR & tag image', {
                        withCredentials([
                            string(credentialsId: 'access-key', variable: 'AWS_ACCESS_KEY'), 
                            string(credentialsId: 'secret-key', variable: 'AWS_SECRET_KEY')
                        ]) {
                            sh """
                            # Login to ECR
                            aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${params.AWS_ACCOUNT_ID}.dkr.ecr.us-east-1.amazonaws.com
                            
                            # Tag images
                            docker tag ${params.ECR_REPO_NAME} ${params.AWS_ACCOUNT_ID}.dkr.ecr.us-east-1.amazonaws.com/${params.ECR_REPO_NAME}:${BUILD_NUMBER}
                            docker tag ${params.ECR_REPO_NAME} ${params.AWS_ACCOUNT_ID}.dkr.ecr.us-east-1.amazonaws.com/${params.ECR_REPO_NAME}:latest
                            
                            # Verify tags
                            echo "Tagged images:"
                            docker images ${params.AWS_ACCOUNT_ID}.dkr.ecr.us-east-1.amazonaws.com/${params.ECR_REPO_NAME}
                            """
                        }
                    }, stageResults)
                }
            }
        }
        
        stage('9. Push image to ECR') {
            steps {
                script {
                    executeStageWithTracking('Push image to ECR', {
                        withCredentials([
                            string(credentialsId: 'access-key', variable: 'AWS_ACCESS_KEY'), 
                            string(credentialsId: 'secret-key', variable: 'AWS_SECRET_KEY')
                        ]) {
                            sh """
                            echo "Pushing image with build number: ${BUILD_NUMBER}"
                            docker push ${params.AWS_ACCOUNT_ID}.dkr.ecr.us-east-1.amazonaws.com/${params.ECR_REPO_NAME}:${BUILD_NUMBER}
                            
                            echo "Pushing latest image"
                            docker push ${params.AWS_ACCOUNT_ID}.dkr.ecr.us-east-1.amazonaws.com/${params.ECR_REPO_NAME}:latest
                            
                            echo "Images pushed successfully to ECR"
                            """
                        }
                    }, stageResults)
                }
            }
        }
        
        stage('10. Cleanup Images') {
            steps {
                script {
                    executeStageWithTracking('Cleanup Images', {
                        sh """
                        echo "Cleaning up local Docker images..."
                        
                        # Remove tagged images
                        docker rmi ${params.AWS_ACCOUNT_ID}.dkr.ecr.us-east-1.amazonaws.com/${params.ECR_REPO_NAME}:${BUILD_NUMBER} || true
                        docker rmi ${params.AWS_ACCOUNT_ID}.dkr.ecr.us-east-1.amazonaws.com/${params.ECR_REPO_NAME}:latest || true
                        docker rmi ${params.ECR_REPO_NAME} || true
                        
                        # Clean up dangling images
                        docker image prune -f || true
                        
                        echo "Remaining images:"
                        docker images
                        """
                    }, stageResults)
                }
            }
        }
    }
    
    post {
        always {
            script {
                // Determine overall build status
                def buildStatus = currentBuild.currentResult ?: 'SUCCESS'
                
                // Mark any unexecuted stages as SKIPPED
                def expectedStages = [
                    'Git Checkout', 'Install npm', 'Trivy Scan', 
                    'Build Docker Image', 'Create ECR repo', 
                    'Login to ECR & tag image', 'Push image to ECR', 'Cleanup Images'
                ]
                
                expectedStages.each { stageName ->
                    if (!stageResults.containsKey(stageName)) {
                        stageResults[stageName] = 'SKIPPED'
                    }
                }
                
                // Generate email subject
                def emailSubject = "[Jenkins] ${buildStatus}: ${env.JOB_NAME} - Build #${env.BUILD_NUMBER}"
                
                // Generate email body
                def emailBody = generateEmailBody(buildStatus, stageResults)
                
                // Send email notification
                try {
                    emailext (
                        subject: emailSubject,
                        body: emailBody,
                        mimeType: 'text/html',
                        to: env.EMAIL_RECIPIENTS,
                        replyTo: 'noreply@yourcompany.com',
                        attachLog: buildStatus != 'SUCCESS', // Attach logs only if build failed
                        compressLog: true
                    )
                    echo "Email notification sent successfully to: ${env.EMAIL_RECIPIENTS}"
                } catch (Exception e) {
                    echo "Failed to send email notification: ${e.getMessage()}"
                    // Don't fail the build if email sending fails
                }
                
                // Print summary to console
                echo "\n" + "="*50
                echo "PIPELINE EXECUTION SUMMARY"
                echo "="*50
                echo "Build Status: ${buildStatus}"
                echo "Build Number: ${env.BUILD_NUMBER}"
                echo "Job Name: ${env.JOB_NAME}"
                echo "\nStage Results:"
                stageResults.each { stageName, status ->
                    echo "  ${stageName}: ${status}"
                }
                echo "="*50
            }
        }
        
        success {
            echo "üéâ Pipeline completed successfully! Docker image pushed to ECR."
        }
        
        failure {
            echo "‚ùå Pipeline failed. Check the logs and stage results above."
        }
        
        unstable {
            echo "‚ö†Ô∏è Pipeline completed with warnings. Please review the results."
        }
    }
}