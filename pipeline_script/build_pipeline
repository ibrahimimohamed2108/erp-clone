// Method to update stage status map (defined OUTSIDE pipeline block)
def updateStageStatus(Map stageStatusMap, String stageName, String status) {
    stageStatusMap[stageName] = status
}

// Method to build summary message of stages
def buildStageSummary(Map stageStatusMap) {
    def summary = "Build Stage Status Summary:\n"
    stageStatusMap.each { stage, status ->
        summary += "- ${stage}: ${status}\n"
    }
    return summary
}

pipeline {
    agent any

    parameters {
        string(name: 'ECR_REPO_NAME', defaultValue: 'emierp', description: 'Enter repository name')
        string(name: 'AWS_ACCOUNT_ID', defaultValue: '409556542010', description: 'Enter AWS Account ID')
    }

    tools {
        jdk 'JDK'
        nodejs 'NodeJS'
    }

    environment {
        SMTP_SERVER = 'smtp.gmail.com'
        SMTP_PORT = '587'
        SMTP_USERNAME = credentials('gmail-username')  // Jenkins credential ID for Gmail user
        SMTP_PASSWORD = credentials('gmail-app-password')  // Jenkins credential ID for Gmail app password
        RECIPIENTS = 'ibrahimi.mohamed@student.emi.ac.ma,simparamohamedelbechir7@gmail.com'
        FROM_EMAIL = SMTP_USERNAME
        CHARSET = 'UTF-8'
    }

    stages {
        stage('1. Git Checkout') {
            steps {
                script {
                    try {
                        git branch: 'main', url: 'https://github.com/ibrahimimohamed2108/erp-clone.git'
                        updateStageStatus(stageStatusMap, 'Git Checkout', 'SUCCESS')
                    } catch (e) {
                        updateStageStatus(stageStatusMap, 'Git Checkout', 'FAILURE')
                        throw e
                    }
                }
            }
        }

        stage('4. Install npm') {
            steps {
                script {
                    try {
                        sh "npm install"
                        updateStageStatus(stageStatusMap, 'Install npm', 'SUCCESS')
                    } catch (e) {
                        updateStageStatus(stageStatusMap, 'Install npm', 'FAILURE')
                        throw e
                    }
                }
            }
        }

        stage('5. Trivy Scan') {
            steps {
                script {
                    try {
                        sh "trivy fs . > trivy.txt"
                        updateStageStatus(stageStatusMap, 'Trivy Scan', 'SUCCESS')
                    } catch (e) {
                        updateStageStatus(stageStatusMap, 'Trivy Scan', 'FAILURE')
                        throw e
                    }
                }
            }
        }

        stage('6. Build Docker Image') {
            steps {
                script {
                    try {
                        sh "docker build -t ${params.ECR_REPO_NAME} ."
                        updateStageStatus(stageStatusMap, 'Build Docker Image', 'SUCCESS')
                    } catch (e) {
                        updateStageStatus(stageStatusMap, 'Build Docker Image', 'FAILURE')
                        throw e
                    }
                }
            }
        }

        stage('7. Create ECR repo') {
            steps {
                script {
                    try {
                        withCredentials([string(credentialsId: 'access-key', variable: 'AWS_ACCESS_KEY'), 
                                         string(credentialsId: 'secret-key', variable: 'AWS_SECRET_KEY')]) {
                            sh """
                            aws configure set aws_access_key_id $AWS_ACCESS_KEY
                            aws configure set aws_secret_access_key $AWS_SECRET_KEY
                            aws ecr describe-repositories --repository-names ${params.ECR_REPO_NAME} --region us-east-1 || \
                            aws ecr create-repository --repository-name ${params.ECR_REPO_NAME} --region us-east-1
                            """
                        }
                        updateStageStatus(stageStatusMap, 'Create ECR repo', 'SUCCESS')
                    } catch (e) {
                        updateStageStatus(stageStatusMap, 'Create ECR repo', 'FAILURE')
                        throw e
                    }
                }
            }
        }

        stage('8. Login to ECR & tag image') {
            steps {
                script {
                    try {
                        withCredentials([string(credentialsId: 'access-key', variable: 'AWS_ACCESS_KEY'), 
                                         string(credentialsId: 'secret-key', variable: 'AWS_SECRET_KEY')]) {
                            sh """
                            aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${params.AWS_ACCOUNT_ID}.dkr.ecr.us-east-1.amazonaws.com
                            docker tag ${params.ECR_REPO_NAME} ${params.AWS_ACCOUNT_ID}.dkr.ecr.us-east-1.amazonaws.com/${params.ECR_REPO_NAME}:${BUILD_NUMBER}
                            docker tag ${params.ECR_REPO_NAME} ${params.AWS_ACCOUNT_ID}.dkr.ecr.us-east-1.amazonaws.com/${params.ECR_REPO_NAME}:latest
                            """
                        }
                        updateStageStatus(stageStatusMap, 'Login to ECR & tag image', 'SUCCESS')
                    } catch (e) {
                        updateStageStatus(stageStatusMap, 'Login to ECR & tag image', 'FAILURE')
                        throw e
                    }
                }
            }
        }

        stage('9. Push image to ECR') {
            steps {
                script {
                    try {
                        withCredentials([string(credentialsId: 'access-key', variable: 'AWS_ACCESS_KEY'), 
                                         string(credentialsId: 'secret-key', variable: 'AWS_SECRET_KEY')]) {
                            sh """
                            docker push ${params.AWS_ACCOUNT_ID}.dkr.ecr.us-east-1.amazonaws.com/${params.ECR_REPO_NAME}:${BUILD_NUMBER}
                            docker push ${params.AWS_ACCOUNT_ID}.dkr.ecr.us-east-1.amazonaws.com/${params.ECR_REPO_NAME}:latest
                            """
                        }
                        updateStageStatus(stageStatusMap, 'Push image to ECR', 'SUCCESS')
                    } catch (e) {
                        updateStageStatus(stageStatusMap, 'Push image to ECR', 'FAILURE')
                        throw e
                    }
                }
            }
        }

        stage('10. Cleanup Images') {
            steps {
                script {
                    try {
                        sh """
                        docker rmi ${params.AWS_ACCOUNT_ID}.dkr.ecr.us-east-1.amazonaws.com/${params.ECR_REPO_NAME}:${BUILD_NUMBER}
                        docker rmi ${params.AWS_ACCOUNT_ID}.dkr.ecr.us-east-1.amazonaws.com/${params.ECR_REPO_NAME}:latest
                        docker images
                        """
                        updateStageStatus(stageStatusMap, 'Cleanup Images', 'SUCCESS')
                    } catch (e) {
                        updateStageStatus(stageStatusMap, 'Cleanup Images', 'FAILURE')
                        throw e
                    }
                }
            }
        }
    }

    post {
        always {
            script {
                // Send email regardless of build result
                
                // Initialize the stage status map if not already initialized (e.g. if failure before any stage)
                if (!binding.hasVariable('stageStatusMap')) {
                    stageStatusMap = [:]
                }

                // Compose the summary
                def summary = buildStageSummary(stageStatusMap)

                // Compose the email body
                def body = """
                Hello,

                The Jenkins build #${BUILD_NUMBER} for repository '${params.ECR_REPO_NAME}' has finished with status: ${currentBuild.currentResult}.

                ${summary}

                Please check the Jenkins job for more details.

                Regards,
                Jenkins CI
                """

                // Send email using SMTP (Gmail)
                // Requires Jenkins Email Extension plugin configured to use SMTP or custom code below

                // Example using Jenkins 'emailext' plugin:
                emailext(
                    subject: "Jenkins Build #${BUILD_NUMBER} - ${currentBuild.currentResult}",
                    body: body,
                    to: env.RECIPIENTS,
                    from: env.FROM_EMAIL,
                    mimeType: 'text/plain',
                    charset: env.CHARSET
                )
            }
        }
    }
}

// Initialize stageStatusMap globally before pipeline execution
def stageStatusMap = [:]
