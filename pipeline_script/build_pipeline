pipeline {
    agent any

    parameters {
        string(name: 'ECR_REPO_NAME', defaultValue: 'emierp', description: 'Enter repository name')
        string(name: 'AWS_ACCOUNT_ID', defaultValue: '409556542010', description: 'Enter AWS Account ID')
    }

    tools {
        jdk 'JDK'
        nodejs 'NodeJS'
    }

    environment {
        // Uncomment if using Sonar: SCANNER_HOME = tool 'SonarQube Scanner'
    }

    stages {
        stage('1. Git Checkout') {
            steps {
                script {
                    executeStageWithTracking('Git Checkout') {
                        git branch: 'main', url: 'https://github.com/ibrahimimohamed2108/erp-clone.git'
                    }
                }
            }
        }

        stage('2. Install npm') {
            steps {
                script {
                    executeStageWithTracking('Install npm') {
                        sh 'npm install'
                    }
                }
            }
        }

        stage('3. Trivy Scan') {
            steps {
                script {
                    executeStageWithTracking('Trivy Scan') {
                        sh "trivy fs . > trivy.txt"
                    }
                }
            }
        }

        stage('4. Build Docker Image') {
            steps {
                script {
                    executeStageWithTracking('Build Docker Image') {
                        sh "docker build -t ${params.ECR_REPO_NAME} ."
                    }
                }
            }
        }

        stage('5. Create ECR repo') {
            steps {
                script {
                    executeStageWithTracking('Create ECR repo') {
                        withCredentials([
                            string(credentialsId: 'access-key', variable: 'AWS_ACCESS_KEY'),
                            string(credentialsId: 'secret-key', variable: 'AWS_SECRET_KEY')
                        ]) {
                            sh """
                            set -e
                            aws configure set aws_access_key_id $AWS_ACCESS_KEY
                            aws configure set aws_secret_access_key $AWS_SECRET_KEY
                            aws ecr describe-repositories --repository-names ${params.ECR_REPO_NAME} --region us-east-1 || \
                            aws ecr create-repository --repository-name ${params.ECR_REPO_NAME} --region us-east-1
                            """
                        }
                    }
                }
            }
        }

        stage('6. Login to ECR & tag image') {
            steps {
                script {
                    executeStageWithTracking('Login to ECR & tag image') {
                        withCredentials([
                            string(credentialsId: 'access-key', variable: 'AWS_ACCESS_KEY'),
                            string(credentialsId: 'secret-key', variable: 'AWS_SECRET_KEY')
                        ]) {
                            sh """
                            set -e
                            aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${params.AWS_ACCOUNT_ID}.dkr.ecr.us-east-1.amazonaws.com
                            docker tag ${params.ECR_REPO_NAME} ${params.AWS_ACCOUNT_ID}.dkr.ecr.us-east-1.amazonaws.com/${params.ECR_REPO_NAME}:${BUILD_NUMBER}
                            docker tag ${params.ECR_REPO_NAME} ${params.AWS_ACCOUNT_ID}.dkr.ecr.us-east-1.amazonaws.com/${params.ECR_REPO_NAME}:latest
                            """
                        }
                    }
                }
            }
        }

        stage('7. Push image to ECR') {
            steps {
                script {
                    executeStageWithTracking('Push image to ECR') {
                        withCredentials([
                            string(credentialsId: 'access-key', variable: 'AWS_ACCESS_KEY'),
                            string(credentialsId: 'secret-key', variable: 'AWS_SECRET_KEY')
                        ]) {
                            sh """
                            set -e
                            docker push ${params.AWS_ACCOUNT_ID}.dkr.ecr.us-east-1.amazonaws.com/${params.ECR_REPO_NAME}:${BUILD_NUMBER}
                            docker push ${params.AWS_ACCOUNT_ID}.dkr.ecr.us-east-1.amazonaws.com/${params.ECR_REPO_NAME}:latest
                            """
                        }
                    }
                }
            }
        }

        stage('8. Cleanup Images') {
            steps {
                script {
                    executeStageWithTracking('Cleanup Images') {
                        sh """
                        docker rmi ${params.AWS_ACCOUNT_ID}.dkr.ecr.us-east-1.amazonaws.com/${params.ECR_REPO_NAME}:${BUILD_NUMBER} || true
                        docker rmi ${params.AWS_ACCOUNT_ID}.dkr.ecr.us-east-1.amazonaws.com/${params.ECR_REPO_NAME}:latest || true
                        docker images
                        """
                    }
                }
            }
        }
    }

    post {
        always {
            script {
                def buildStatus = currentBuild.currentResult
                def htmlBody = generateEmailBody(buildStatus, stageResults)

                emailext (
                    subject: "Jenkins Build: ${buildStatus} - Job ${env.JOB_NAME} #${env.BUILD_NUMBER}",
                    body: htmlBody,
                    mimeType: 'text/html',
                    to: 'ibrahimi.mohamed@student.emi.ac.ma, simparamohamedelbechir7@gmail.com'
                )
            }
        }
    }
}

// ========== Helper Functions ==========

def stageResults = [:]

def recordStageResult(stageName, status) {
    stageResults[stageName] = status
    echo "Stage '${stageName}' completed with status: ${status}"
}

def executeStageWithTracking(stageName, closure) {
    try {
        closure()
        recordStageResult(stageName, 'SUCCESS')
    } catch (Exception e) {
        recordStageResult(stageName, 'FAILED')
        throw e
    }
}

def generateEmailBody(buildStatus, stageResults) {
    def emailBody = """
<html>
<head>
    <style>
        body { font-family: Arial, sans-serif; margin: 20px; }
        .header { background-color: ${buildStatus == 'SUCCESS' ? '#d4edda' : '#f8d7da'};
                  color: ${buildStatus == 'SUCCESS' ? '#155724' : '#721c24'};
                  padding: 15px; border-radius: 5px; margin-bottom: 20px; }
        .summary-table { width: 100%; border-collapse: collapse; margin: 20px 0; }
        .summary-table th, .summary-table td { border: 1px solid #ddd; padding: 12px; text-align: left; }
        .summary-table th { background-color: #f2f2f2; font-weight: bold; }
        .success { color: #28a745; font-weight: bold; }
        .failed { color: #dc3545; font-weight: bold; }
        .build-info { background-color: #e9ecef; padding: 15px; border-radius: 5px; margin: 20px 0; }
    </style>
</head>
<body>
    <div class="header">
        <h2>üöÄ Jenkins Pipeline Execution Report</h2>
        <p><strong>Build Status:</strong> ${buildStatus}</p>
    </div>

    <div class="build-info">
        <h3>üìã Build Information</h3>
        <ul>
            <li><strong>Job Name:</strong> ${env.JOB_NAME}</li>
            <li><strong>Build Number:</strong> #${env.BUILD_NUMBER}</li>
            <li><strong>Build URL:</strong> <a href="${env.BUILD_URL}">${env.BUILD_URL}</a></li>
            <li><strong>Repository:</strong> emierp</li>
            <li><strong>Branch:</strong> main</li>
            <li><strong>Started by:</strong> ${env.BUILD_USER_ID ?: 'System'}</li>
        </ul>
    </div>

    <h3>üìä Stage Execution Summary</h3>
    <table class="summary-table">
        <thead>
            <tr>
                <th>Stage Name</th>
                <th>Status</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>
"""

    def stageDescriptions = [
        'Git Checkout': 'Source code checkout from GitHub repository',
        'Install npm': 'Node.js dependencies installation',
        'Trivy Scan': 'Security vulnerability scanning',
        'Build Docker Image': 'Docker image build process',
        'Create ECR repo': 'AWS ECR repository creation/verification',
        'Login to ECR & tag image': 'ECR authentication and image tagging',
        'Push image to ECR': 'Docker image push to ECR registry',
        'Cleanup Images': 'Local Docker images cleanup'
    ]

    stageResults.each { stageName, status ->
        def statusClass = status.toLowerCase()
        def statusIcon = status == 'SUCCESS' ? '‚úÖ' : (status == 'FAILED' ? '‚ùå' : '‚è≠Ô∏è')
        emailBody += """
            <tr>
                <td><strong>${stageName}</strong></td>
                <td class="${statusClass}">${statusIcon} ${status}</td>
                <td>${stageDescriptions[stageName] ?: 'Pipeline stage execution'}</td>
            </tr>
        """
    }

    emailBody += """
        </tbody>
    </table>

    <div style="margin-top: 30px; padding: 15px; background-color: #f8f9fa; border-radius: 5px;">
        <h4>üîß Next Steps:</h4>
        <ul>
    """

    if (buildStatus == 'SUCCESS') {
        emailBody += """
            <li>‚úÖ Your application has been successfully deployed to ECR</li>
            <li>üöÄ You can now proceed with deployment</li>
            <li>üìä Review logs for optimization</li>
        """
    } else {
        emailBody += """
            <li>üîç Check the failed stage(s) in Jenkins output</li>
            <li>üõ†Ô∏è Fix issues and retry</li>
            <li>üìû Contact DevOps if needed</li>
        """
    }

    emailBody += """
        </ul>
    </div>

    <div style="margin-top: 20px; font-size: 12px; color: #6c757d;">
        <p>This is an automated message from Jenkins CI/CD Pipeline. Please do not reply.</p>
        <p>Generated on: ${new Date().format('yyyy-MM-dd HH:mm:ss')} UTC</p>
    </div>
</body>
</html>
"""
    return emailBody
}
